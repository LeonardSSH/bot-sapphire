{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../src/lib/utils/util.ts"],"names":[],"mappings":";;;;AAEA,mDAA6C;AAC7C,mDAAiD;AAEjD,oEAA8D;AAOjD,QAAA,kBAAkB,GAAqB,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC;AAMjF,SAAgB,YAAY,CAAC,GAA4B,EAAE,OAAyB;IACnF,IAAI,sBAAU,CAAC,OAAO,CAAC;QAAE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;AACvF,CAAC;AAFD,oCAEC;AAsBM,KAAK,UAAU,KAAK,CAAC,GAAiB,EAAE,OAAwC,EAAE,IAAuB;IAC/G,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;QACnC,OAAO,GAAG,EAAE,CAAC;QACb,IAAI,IAAwB,CAAC;KAC7B;SAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;QACvC,IAAI,GAAG,OAAO,CAAC;QACf,OAAO,GAAG,EAAE,CAAC;KACb;SAAM,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;QACvC,IAAI,IAAwB,CAAC;KAC7B;IAED,MAAM,MAAM,GAAa,MAAM,oBAAS,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACvD,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;QACf,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,GAAG,GAAG,KAAK,MAAM,CAAC,UAAU,KAAK,MAAM,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QACjF,OAAO,IAAI,CAAC;KACZ;IAED,QAAQ,IAAI,EAAE;QACb;YACC,OAAO,MAAM,CAAC;QACf;YACC,OAAO,MAAM,CAAC,MAAM,EAAE,CAAC;QACxB;YACC,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC;QACtB;YACC,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC;QACtB;YACC,MAAM,IAAI,KAAK,CAAC,gBAAgB,IAAI,EAAE,CAAC,CAAC;KACzC;AACF,CAAC;AA7BD,sBA6BC;AAEM,KAAK,UAAU,cAAc,CAAC,SAAiB,EAAE,IAAiD;IACxG,MAAM,GAAG,GAAiB,MAAM,KAAK,CAAC,4BAA4B,SAAS,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC;IAC7H,OAAO,GAAG,CAAC;AACf,CAAC;AAHD,wCAGC;AAEM,KAAK,UAAU,mBAAmB,CAAC,SAAiB,EAAE,IAAiD;IAC7G,MAAM,GAAG,GAAiB,MAAM,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAChE,MAAM,MAAM,GAAqB,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IACzG,OAAO,MAAM,CAAC;AACf,CAAC;AAJD,kDAIC","sourcesContent":["/* eslint-disable valid-jsdoc */\nimport { PenguClient } from \"@lib/PenguClient\";\nimport { Events } from \"@sapphire/framework\";\nimport { isThenable } from \"@sapphire/utilities\";\nimport { ValueTransformer, Timestamp } from \"typeorm\";\nimport nodeFetch, { RequestInit, Response } from \"node-fetch\";\nimport { URL } from \"url\";\n\n/**\n * @copyright 2019-2020 Antonio Román\n * @license Apache-2.0\n */\nexport const kBigIntTransformer: ValueTransformer = { from: Number, to: String };\n\n/**\n * @copyright 2019-2020 Antonio Román\n * @license Apache-2.0\n */\nexport function floatPromise(ctx: { client: PenguClient }, promise: Promise<unknown>) {\n\tif (isThenable(promise)) promise.catch(error => ctx.client.emit(Events.Error, error));\n}\n\nexport const enum FetchResultTypes {\n\tJSON,\n\tBuffer,\n\tText,\n\tResult\n}\n\n/**\n * @copyright 2019-2020 Antonio Román\n * @license Apache-2.0\n */\nexport async function fetch<R>(url: URL | string, type?: FetchResultTypes.JSON): Promise<R>;\nexport async function fetch<R>(url: URL | string, options: RequestInit, type?: FetchResultTypes.JSON): Promise<R>;\nexport async function fetch(url: URL | string, type: FetchResultTypes.Buffer): Promise<Buffer>;\nexport async function fetch(url: URL | string, options: RequestInit, type: FetchResultTypes.Buffer): Promise<Buffer>;\nexport async function fetch(url: URL | string, type: FetchResultTypes.Text): Promise<string>;\nexport async function fetch(url: URL | string, options: RequestInit, type: FetchResultTypes.Text): Promise<string>;\nexport async function fetch(url: URL | string, type: FetchResultTypes.Result): Promise<Response>;\nexport async function fetch(url: URL | string, options: RequestInit, type: FetchResultTypes.Result): Promise<Response>;\nexport async function fetch<R>(url: URL | string, options: RequestInit, type: FetchResultTypes): Promise<Response | Buffer | string | R>;\nexport async function fetch(url: URL | string, options?: RequestInit | FetchResultTypes, type?: FetchResultTypes) {\n\tif (typeof options === \"undefined\") {\n\t\toptions = {};\n\t\ttype = FetchResultTypes.JSON;\n\t} else if (typeof options === \"number\") {\n\t\ttype = options;\n\t\toptions = {};\n\t} else if (typeof type === \"undefined\") {\n\t\ttype = FetchResultTypes.JSON;\n\t}\n\n\tconst result: Response = await nodeFetch(url, options);\n\tif (!result.ok) {\n\t\tconsole.error(new Error(`${url}\\n${result.statusText}\\n${await result.text()}`));\n\t\treturn null;\n\t}\n\n\tswitch (type) {\n\t\tcase FetchResultTypes.Result:\n\t\t\treturn result;\n\t\tcase FetchResultTypes.Buffer:\n\t\t\treturn result.buffer();\n\t\tcase FetchResultTypes.JSON:\n\t\t\treturn result.json();\n\t\tcase FetchResultTypes.Text:\n\t\t\treturn result.text();\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown type ${type}`);\n\t}\n}\n\nexport async function fetchSubreddit(subreddit: string, type?: \"top\"|\"hot\"|\"controversial\"|\"new\"|\"rising\"): Promise<RedditResult> {\n\tconst res: RedditResult = await fetch(`https://www.reddit.com/r/${subreddit}${type?.length ? `/${type}` : \"\"}/.json?limit=100`);\n    return res;\n}\n\nexport async function randomSubredditItem(subreddit: string, type?: \"top\"|\"hot\"|\"controversial\"|\"new\"|\"rising\"): Promise<RedditResultItem> {\n\tconst res: RedditResult = await fetchSubreddit(subreddit, type);\n\tconst random: RedditResultItem = res.data.children[Math.floor(Math.random() * res.data.children.length)];\n\treturn random;\n}\n\n// Note: This is not all the data that reddit returns.\ninterface RedditResult {\n\tkind: string\n\tdata: {\n\t\tmodhash: string;\n\t\tdist: number;\n\t\tchildren: RedditResultItem[]\n\t}\n}\n\ninterface RedditResultItem {\n\tkind: \"t1\" | \"t2\" | \"t3\" | \"t4\" | \"t5\" | \"t6\";\n\tdata: {\n\t\tsubreddit: string;\n\t\tselftext: string;\n\t\tauthor_fullname: string;\n\t\ttitle: string;\n\t\thidden: boolean;\n\t\tname: string;\n\t\tquarantine: boolean;\n\t\tupvote_ratio: number;\n\t\tsubreddit_type: \"public\" | \"private\";\n\t\tups: number;\n\t\tis_original_content: boolean;\n\t\tis_reddit_media_domain: boolean;\n\t\tcreated: Timestamp;\n\t\tover_18: boolean;\n\t\tmedia_only: boolean;\n\t\tauthor: string;\n\t\tpermalink: string;\n\t\turl: string;\n\t\tcreated_utc: Timestamp;\n\t\tthumbnail?: string;\n\t\turl_overridden_by_dest?: string;\n\t}\n}\n"]}