{"version":3,"file":"CacheManager.js","sourceRoot":"","sources":["../../../src/lib/structures/CacheManager.ts"],"names":[],"mappings":";;;AAEA,iDAA8C;AAG9C,MAAa,YAAY;IACJ,MAAM,CAAc;IAErC,YAAmB,MAAmB;QAClC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAEM,GAAG,CAAC,GAAW,EAAE,KAAa,EAAE,IAAc;QACjD,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,YAAY,CAAC,SAAS,GAAG,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;IAClF,CAAC;IAEM,GAAG,CAAC,GAAW,EAAE,IAAc;QAClC,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,YAAY,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,CAAC;IAC3E,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,GAAW,EAAE,IAAc;QACxC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QACxC,OAAO,KAAK,KAAK,IAAI,CAAC;IAC1B,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAU;QAC7B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,iBAAuB,CAAC;QACxD,IAAI,MAAM,KAAK,IAAI;YAAE,OAAO,MAAM,CAAC;QAEnC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;QAEpD,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,MAAM,iBAAuB,CAAC;QAC1D,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAEtB,OAAO,QAAQ,CAAC,MAAM,CAAC;IAC3B,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,EAAU;QAC/B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,mBAAyB,CAAC;QACxD,IAAI,IAAI,KAAK,IAAI;YAAE,OAAO,IAAI,CAAC;QAE/B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;QAEpD,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,QAAQ,mBAAyB,CAAC;QAC9D,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAEtB,OAAO,QAAQ,CAAC,QAAQ,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,mBAAmB,CAAC,EAAU;QACvC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,aAAK,CAAC,OAAO,EAAE,CAAC;QACzC,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;IAEM,MAAM,CAAU,SAAS,GAAG,GAAG,CAAC;;AAjD3C,oCAmDC","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\nimport { PenguClient } from \"@lib/PenguClient\";\nimport { DbSet } from \"@lib/structures/DbSet\";\nimport { CacheKey } from \"@utils/Enums\";\n\nexport class CacheManager {\n    private readonly client: PenguClient;\n\n    public constructor(client: PenguClient) {\n        this.client = client;\n    }\n\n    public set(key: string, value: string, type: CacheKey) {\n        return this.client.redis.set(`${type}${CacheManager.SEPERATOR}${key}`, value);\n    }\n\n    public get(key: string, type: CacheKey) {\n        return this.client.redis.get(`${type}${CacheManager.SEPERATOR}${key}`);\n    }\n\n    public async has(key: string, type: CacheKey) {\n        const value = await this.get(key, type);\n        return value !== null;\n    }\n\n    public async getPrefix(id: string) {\n        const prefix = await this.get(id, CacheKey.GuildPrefix);\n        if (prefix !== null) return prefix;\n\n        const settings = await this.ensureGuildSettings(id);\n\n        await this.set(id, settings.prefix, CacheKey.GuildPrefix);\n        await settings.save();\n\n        return settings.prefix;\n    }\n\n    public async getLanguage(id: string) {\n        const lang = await this.get(id, CacheKey.GuildLanguage);\n        if (lang !== null) return lang;\n\n        const settings = await this.ensureGuildSettings(id);\n\n        await this.set(id, settings.language, CacheKey.GuildLanguage);\n        await settings.save();\n\n        return settings.language;\n    }\n\n    public async ensureGuildSettings(id: string) {\n        const { guilds } = await DbSet.connect();\n        return guilds.ensure(id);\n    }\n\n    public static readonly SEPERATOR = \"_\";\n\n}\n"]}