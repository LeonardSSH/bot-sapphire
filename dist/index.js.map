{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAAA,iCAA+B;AAC/B,4BAA0B;AAC1B,kDAA+C;AAC/C,iDAA8C;AAC9C,yCAAiE;AACjE,uDAA6E;AAC7E,6DAAuC;AACvC,sCAA2C;AAE3C,IAAI,eAAM,CAAC,UAAU,EAAE;IACnB,MAAM,CAAC,IAAI,CAAC;QACR,GAAG,EAAE,eAAM,CAAC,UAAU;QACtB,YAAY,EAAE;YACV,IAAI,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE;YACjC,IAAI,MAAM,CAAC,YAAY,CAAC,gBAAgB,EAAE;YAC1C,IAAI,MAAM,CAAC,YAAY,CAAC,YAAY,EAAE;YACtC,IAAI,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE;YACjC,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;YAClE,IAAI,qBAAM,EAAE;YACZ,IAAI,6BAAc,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;YAChC,IAAI,4BAAa,CAAC,EAAE,IAAI,EAAE,SAAS,IAAI,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;SAC1D;KACJ,CAAC,CAAC;CACN;AAED,MAAM,MAAM,GAAG,IAAI,yBAAW,CAAC,uBAAc,CAAC,CAAC;AAE/C,KAAK,UAAU,IAAI;IACf,MAAM,aAAK,CAAC,OAAO,EAAE,CAAC;IACtB,MAAM,MAAM,CAAC,KAAK,CAAC,kBAAS,CAAC,CAAC;AAClC,CAAC;AAED,mBAAY,CAAC,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC","sourcesContent":["import \"module-alias/register\";\nimport \"reflect-metadata\";\nimport { PenguClient } from \"@lib/PenguClient\";\nimport { DbSet } from \"@lib/structures/DbSet\";\nimport { BOT_TOKEN, CLIENT_OPTIONS, TOKENS } from \"@root/config\";\nimport { Dedupe, ExtraErrorData, RewriteFrames } from \"@sentry/integrations\";\nimport * as Sentry from \"@sentry/node\";\nimport { floatPromise } from \"@utils/util\";\n\nif (TOKENS.SENTRY_DNS) {\n    Sentry.init({\n        dsn: TOKENS.SENTRY_DNS,\n        integrations: [\n            new Sentry.Integrations.Modules(),\n            new Sentry.Integrations.FunctionToString(),\n            new Sentry.Integrations.LinkedErrors(),\n            new Sentry.Integrations.Console(),\n            new Sentry.Integrations.Http({ breadcrumbs: true, tracing: true }),\n            new Dedupe(),\n            new ExtraErrorData({ depth: 3 }),\n            new RewriteFrames({ root: __dirname || process.cwd() })\n        ]\n    });\n}\n\nconst client = new PenguClient(CLIENT_OPTIONS);\n\nasync function main() {\n    await DbSet.connect();\n    await client.login(BOT_TOKEN);\n}\n\nfloatPromise({ client }, main());\n"]}